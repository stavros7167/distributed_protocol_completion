environment channel(in1, in2, out1, out2) {
  inputs [in1, in2]
  outputs [out1, out2]
  initial c0
  // receive
  c0 in1? c1 strong_fairness
  c0 in2? c2 strong_fairness
  // deliver
  c1 out1! c0 strong_fairness
  c2 out2! c0 strong_fairness
  // loss
  c0 in1? c0
  c0 in2? c0
  // overflow
  c1 in1? c1
  c1 in2? c1
  c2 in1? c2
  c2 in2? c2
  // duplicate
  c1 out1! c1
  c2 out2! c2
}

forward_channel = channel(p0, p1, p0', p1')

backward_channel = channel(a0, a1, a0', a1')

environment SendingClient {
  inputs [done]
  outputs [send]
  initial sc0
  sc0 send! sc1 // strong_fairness
		// the above strong_fairness constraint is only needed in
		// order to satisfy infinitely_often_send_input_complete.txt
  sc1 done? sc0 
}

environment ReceivingClient {
  inputs [deliver]
  outputs []
  initial rc0
  rc0 deliver? rc0 strong_fairness
}

environment Timer {
  inputs []
  outputs [timeout]
  initial t0
  t0 timeout! t0
}

process sender {
  inputs [send, a0', a1', timeout]
  // input_enabled [send, a0', a1', timeout]
  outputs [done, p0, p1]
  initial s0

  // s0 is an "input state": it can receive all 4 inputs of the sender
  s0 send? s1
  s0 a0'? s0 // adding or removing this self-loop does not seem to affect
		// correctness of abp15.txt
  s0 a1'? s0		// incomplete 1
  s0 timeout? s0	// incomplete 2

  // s1 is an "output state": it does not need to receive any inputs
  s1 p0! s2

  // s2 is an "input state": it can receive a0', a1', and timeout
  // although it cannot receive "send", this is fine, since "send" is not
  // in the list of messages for which strong non-blockingness is required
  s2 a0'? s3
  s2 a1'? s2		// incomplete 3
  s2 timeout? s1 	// incomplete 4

  // s3 is an "output state":
  s3 done! s4

  // s4 is an "input state": it can receive all 4 inputs of the sender
  s4 send? s5
  s4 a0'? s4		// incomplete 5
  s4 a1'? s4 // adding or removing this self-loop does not seem to affect
		// correctness of abp15.txt
  s4 timeout? s4	// incomplete 6

  // s5 is an "output state"
  s5 p1! s6

  // s6 is an "input state"
  s6 a1'? s7
  s6 a0'? s6		// incomplete 7
  s6 timeout? s5	// incomplete 8 

  // s7 is an "output state":
  s7 done! s0
}

// This is incomplete_receiver.txt

process receiver {
  states [r0, r1, r2, r3, r4, r5]
  input_states [r0, r3]
  inputs [p0', p1']
  outputs [deliver, a0, a1]
  initial r0

  // r0 is an "input state": it can receive both inputs p0' and p1'
  r0 p0'? r1

  // r1 is an "output state"
  r1 deliver! r2

  // r2 is an "output state"
  r2 a0! r3

  // r3 is an "input state": it can receive both inputs p0' and p1'
  r3 p1'? r4

  // r4 is an "output state"
  r4 deliver! r5

  // r5 is an "output state"
  r5 a1! r0
}


safety safety_monitor {
  inputs [send, deliver]
  outputs []
  initial sm0
  accepting [error]
  sm0 send? sm1
  sm1 deliver? sm0
  sm0 deliver? error
  sm1 send? error
  error deliver? error
  error send? error
}

liveness deliver_does_not_follow_send {
  inputs [send, deliver]
  outputs []
  initial ld0
  accepting [ld1]
  ld0 send? ld0
  ld0 deliver? ld0
  ld0 send? ld1
  ld1 send? ld1
  ld1 deliver? ld2
  ld2 send? ld2
  ld2 deliver? ld2
}

liveness done_does_not_follow_send {
  inputs [send, done]
  outputs []
  initial ld0
  accepting [ld1]
  ld0 send? ld0
  ld0 done? ld0
  ld0 send? ld1
  ld1 send? ld1
  ld1 done? ld2
  ld2 send? ld2
  ld2 done? ld2
}

//include "infinitely_often_send_input_complete.txt"

// strong_non_blocking [send, deliver, done, timeout, p0, p1, a0, a1, p0', p1', a0', a1']
