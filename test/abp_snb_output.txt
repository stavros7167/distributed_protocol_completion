// testing the limits of our completion tool: how many transitions can we
// remove until the tool breaks down?
// we start from incomplete_sender7.txt and incomplete_receiver.txt
// and keep removing transitions one by one.


// ENVIRONMENT PROCESSES

environment channel(in1, in2, out1, out2) {
  inputs [in1, in2]
  outputs [out1, out2]
  initial c0
  // receive
  c0 in1? c1 strong_fairness
  c0 in2? c2 strong_fairness
  // deliver
  c1 out1! c0 strong_fairness
  c2 out2! c0 strong_fairness
  // loss
  c0 in1? c0
  c0 in2? c0
  // overflow
  c1 in1? c1
  c1 in2? c1
  c2 in1? c2
  c2 in2? c2
  // duplicate
  c1 out1! c1
  c2 out2! c2
}

forward_channel = channel(p0, p1, p0', p1')

backward_channel = channel(a0, a1, a0', a1')

environment ReceivingClient {
  inputs [deliver]
  outputs []
  initial rc0
  rc0 deliver? rc0 strong_fairness
}

environment SendingClient {
  inputs [done]
  outputs [send]
  initial sc0
  sc0 send! sc1 strong_fairness
  sc1 done? sc0
}

environment Timer {
  inputs []
  outputs [timeout]
  initial t0
  t0 timeout! t0
}

// INCOMPLETE PROCESSES FOR SYNTHESIS

process sender {
  inputs [send, a0', a1', timeout]
  outputs [done, p0, p1]
  initial s0

  s0 send? s1
  s0 a1'? s0
  s0 timeout? s0
  s1 p0! s2
  s2 a0'? s3
  s2 a1'? s2
  s2 timeout? s1
  s3 done! s4
  s4 send? s5
  s4 timeout? s4
  s4 a0'? s4
  s5 p1! s6
  s6 a1'? s7
  s6 a0'? s6
  s6 timeout? s5
  s7 done! s0
}


process receiver {
  inputs [p0', p1']
  outputs [deliver, a0, a1]
  initial r0

  r0 p0'? r1
  r0 p1'? r5
  r1 deliver! r2
  r2 a0! r3
  r3 p1'? r4
  r3 p0'? r2
  r4 deliver! r5
  // r5 a1! r0
}


// PROPERTIES

safety safety_monitor {
  inputs [send, deliver]
  outputs []
  initial sm0
  accepting [error]
  sm0 send? sm1
  sm1 deliver? sm0
  sm0 deliver? error
  sm1 send? error
  error deliver? error
  error send? error
}

// The following accepts executions where a send is not eventually followed
// by a deliver
liveness deliver_does_not_follow_send {
  inputs [send, deliver]
  outputs []
  initial ld0
  accepting [ld1]
  ld0 send? ld0
  ld0 deliver? ld0
  ld0 send? ld1
  ld1 send? ld1
  ld1 deliver? ld2
  ld2 send? ld2
  ld2 deliver? ld2
}

// The following accepts executions where a send is not eventually followed
// by a done
liveness done_does_not_follow_send {
  inputs [send, done]
  outputs []
  initial ld0
  accepting [ld1]
  ld0 send? ld0
  ld0 done? ld0
  ld0 send? ld1
  ld1 send? ld1
  ld1 done? ld2
  ld2 send? ld2
  ld2 done? ld2
}

strong_non_blocking [send, deliver, done, timeout, p0, p1, a0, a1, p0', p1', a0', a1']
