include "channels.txt"

forward_channel = channel(p0, p1, p0', p1')

backward_channel = channel(a0, a1, a0', a1')

safety safety_monitor {
  inputs [send, deliver]
  outputs []
  initial q0
  accepting [error]
  q0 send? q1
  q1 deliver? q0
  q0 deliver? error
  q1 send? error
  error deliver? error
  error send? error
}

environment client {
  inputs [deliver]
  outputs [send, timeout]
  initial q0
  q0 send! q0
  q0 deliver? q0 strong_fairness
  q0 timeout! q0
}

process sender {
  inputs [send, a0', a1', timeout]
  outputs [p0, p1]
  initial q0
  q0 send? q1
  q1 p0! q2
  q2 a0'? q3
  q3 send? q4
  q4 p1! q5
  q5 a1'? q0
  // missing the following four transitions
  // q5 a0'? q4
  // q5 timeout? q4
  // q2 a1'? q1
  // q2 timeout? q1
}

process receiver {
  inputs [p0', p1']
  outputs [deliver, a0, a1]
  initial q0
  q0 p0'? q1
  q1 deliver! q2
  q2 a0! q3
  q3 p1'? q4
  q4 deliver! q5
  q5 a1! q0
  // missing the following two transitions
  // q3 p0'? q2
  // q0 p1'? q5
}

// The following accepts executions with a finite number of sends
// It might be fine for this monitor to just read message send
// instead of all messages (maybe then we need an epsilon transition
// from q0 to q1 also)
liveness finite_sends {
  inputs [send, deliver, timeout, p0, p1, a0, a1, p0', p1', a0', a1']
  outputs []
  initial q0
  accepting [q1]
  q0 send? q0
  q0 deliver? q0
  q0 timeout? q0
  q0 p0? q0
  q0 p1? q0
  q0 a0? q0
  q0 a1? q0
  q0 p0'? q0
  q0 p1'? q0
  q0 a0'? q0
  q0 a1'? q0

  q0 send? q1
  q0 deliver? q1
  q0 timeout? q1
  q0 p0? q1
  q0 p1? q1
  q0 a0? q1
  q0 a1? q1
  q0 p0'? q1
  q0 p1'? q1
  q0 a0'? q1
  q0 a1'? q1

  q1 deliver? q1
  q1 timeout? q1
  q1 p0? q1
  q1 p1? q1
  q1 a0? q1
  q1 a1? q1
  q1 p0'? q1
  q1 p1'? q1
  q1 a0'? q1
  q1 a1'? q1

  q1 send? q2

  q2 send? q2
  q2 deliver? q2
  q2 timeout? q2
  q2 p0? q2
  q2 p1? q2
  q2 a0? q2
  q2 a1? q2
  q2 p0'? q2
  q2 p1'? q2
  q2 a0'? q2
  q2 a1'? q2
}


// The following accepts executions where a send is not eventually followed
// by a deliver
liveness deliver_does_not_follow_send {
  inputs [send, deliver]
  outputs []
  initial q0
  accepting [q1]
  q0 send? q0
  q0 deliver? q0
  q0 deliver? q1
  q1 deliver? q1
  q1 send? q2
  q2 send? q2
  q2 deliver? q2
}
