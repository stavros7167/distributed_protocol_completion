
// selectively remove the strong_fairness constraints below, to see which ones
// are necessary for existence of synthesis solutions:
// (you should find that channel fairness and receiving client fairness are
// necessary, while sender fairness is not)


// ENVIRONMENT PROCESSES

environment channel(in1, in2, out1, out2) {
  inputs [in1, in2]
  outputs [out1, out2]
  initial c0
  // receive
  c0 in1? c1 strong_fairness
  c0 in2? c2 strong_fairness
  // deliver
  c1 out1! c0 strong_fairness
  c2 out2! c0 strong_fairness
  // loss
  c0 in1? c0
  c0 in2? c0
  // overflow
  c1 in1? c1
  c1 in2? c1
  c2 in1? c2
  c2 in2? c2
  // duplicate
  c1 out1! c1
  c2 out2! c2
}

forward_channel = channel(p0, p1, p0', p1')

backward_channel = channel(a0, a1, a0', a1')



environment SendingClient {
  inputs [done]
  outputs [send]
  initial sc0
  sc0 send! sc1 strong_fairness
  sc1 done? sc0 
}

environment ReceivingClient {
  inputs [deliver]
  outputs []
  initial rc0
  rc0 deliver? rc0 
}


include "timer.txt"


// INCOMPLETE PROCESSES FOR SYNTHESIS

include "incomplete_sender7.txt"

include "incomplete_receiver.txt"


// PROPERTIES

include "safety_monitor.txt"

include "liveness1.txt"  // [](send -> <> deliver)
// include "liveness1fixed.txt"  // [](send -> <> deliver)

include "liveness3.txt"  // [](send -> <> done)

// include "infinitely_often_send_input_complete.txt"

strong_non_blocking [send, deliver, done, timeout, p0, p1, a0, a1, p0', p1', a0', a1']

