include "channels.txt"

forward_channel = channel(p0, p1, p0', p1')

backward_channel = channel(a0, a1, a0', a1')

environment client {
  inputs [deliver]
  outputs [send, timeout]
  initial q0
  q0 send! q0
  q0 deliver? q0 strong_fairness
  q0 timeout! q0
}

// Maybe wrong receiver
process receiver_abp5_solution1 {
  inputs [p0', p1']
  outputs [deliver, a0, a1]
  initial r0
  r0 p0'? r1
  r1 deliver! r2
  r2 a0! r3
  r3 p1'? r4
  r4 deliver! r5
  r5 a1! r0
  // transitions added by synthesizer:
  r0 p1'? r0
  r3 p0'? r2
}

// Maybe wrong sender
process sender_abp5_solution1_blockingness {
  inputs [send, a0', a1', timeout]
  outputs [p0, p1]
  initial s0
  s0 send? s1
  s1 p0! s2
  s2 a0'? s3
  s3 send? s4
  s4 p1! s5
  s5 a1'? s0
  // transitions added by synthesizer:
  s2 timeout? s1
  s5 timeout? s4
  // states and transitions added to check blockingness
  s3 a0'? s6
  s6 send? s6
  s6 timeout? s6
  s6 a0'? s6
  s6 a1'? s6
}

// include "abp/infinitely_often_send.txt"
// every execution must contain an infinite number of "send"
// so we try to catch those (infinite) executions which only contain finite
// number of "send"

liveness infinitely_often_send {
  inputs [send, deliver, timeout, p0, p1, p0', p1', a0, a1, a0', a1']
  outputs []
  initial q0
  accepting [q1]

  q0 send? q0
  q0 deliver? q0
  q0 timeout? q0
  q0 p0? q0
  q0 p1? q0
  q0 p0'? q0
  q0 p1'? q0
  q0 a0? q0
  q0 a1? q0
  q0 a0'? q0
  q0 a1'? q0

  // non-deterministically choose to move to q1, with anything but send
  q0 deliver? q1
  q0 timeout? q1
  q0 p0? q1
  q0 p1? q1
  q0 p0'? q1
  q0 p1'? q1
  q0 a0? q1
  q0 a1? q1
  q0 a0'? q1
  q0 a1'? q1

  // then stay forever at q1 without ever doing send
  q1 deliver? q1
  q1 timeout? q1
  q1 p0? q1
  q1 p1? q1
  q1 p0'? q1
  q1 p1'? q1
  q1 a0? q1
  q1 a1? q1
  q1 a0'? q1
  q1 a1'? q1

}

